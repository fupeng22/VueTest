{"remainingRequest":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\test\\vueSpace\\hello-world\\hello-world\\src\\App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\src\\App.vue","mtime":1590571724964},{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2FwcCB7CiAgZm9udC1mYW1pbHk6IEF2ZW5pciwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBjb2xvcjogIzJjM2U1MDsKICBtYXJnaW4tdG9wOiA2MHB4Owp9Ci5hcmVhewogICAgbWFyZ2luOiA4cHggYXV0bzsKICAgIHdpZHRoOiA1MHB4OwogICAgaGVpZ2h0OiA1MHB4OwogICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2N5YW47Cn0KLmFyZWEtYWN0aXZlewogICAgYmFja2dyb3VuZC1jb2xvcjogY3JpbXNvbjsKfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\" :style=\"{ fontSize: postFontSize + 'em' }\">\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n    <ul>\n        <!--组件：my-list，data-list是在MyList组件里面定义的props，数据从父组件传入-->\n        <my-list v-for=\"item in items\" :key=\"item.id\" :data-list=\"item\"></my-list>\n    </ul>\n\n    <p v-text=\"msg1\"></p>\n    <!--和下面效果一样-->\n    <p>{{msg1}}</p>\n\n    <!--v-html 内容不会被处理-->\n    <p v-html=\"msg2\"></p>\n    <!--v-text 内容会被作为vue模板编译-->\n    <p v-text=\"msg2\"></p>\n\n    <p v-show=\"flag\" v-text=\"msg3\"></p>\n\n    <p v-if=\"flag1\" v-text=\"msg4\"></p>\n\n    <p v-if=\"flag2\" v-text=\"msg5\"></p>\n    <p v-else>我是穷逼</p>\n\n    <p v-if=\"flag3 == 1\">{{msg6}}</p>\n    <p v-else-if=\"flag3 == 2\">我假装我很有钱</p>\n    <p v-else>我是穷逼</p>\n\n    <!---->\n    <div v-for=\"(item_,index_) in items2\"  :key=\"index_\">\n        {{index_}} -- {{item_}}\n    </div>\n    \n\n\n    <button @click=\"aClick\">普通点击事件</button>\n    <br><br>\n    <button @click.stop=\"bClick\">阻止冒泡事件</button>\n    <br><br>\n    <a href=\"https://www.qq.com/\" @click.stop.prevent=\"cClick\">阻止默认事件</a>\n    <br><br>\n    <button @click.once=\"dClick\">执行一次事件</button>\n    <br><br>\n    <input @keyup.enter=\"eClick\" placeholder=\"有本事按Enter\"/>\n    <br><br>\n    <input @click.stop.ctrl=\"fClick\" placeholder=\"有本事按Ctrl+Click\"/>\n    <br><br>\n    <input @keydown.ctrl.alt=\"gClick\" placeholder=\"有本事按Ctrl+Alt\"/>\n    <br><br>\n    <button @click.stop.left=\"hClick\">鼠标左键事件</button>\n\n\n    <!--绑定src属性-->\n    <img :src=\"imgSrc\"/>\n    <!--绑定class：数组方式-->\n    <div :class=\"[myClass]\"></div>\n    <!--绑定class：class 存在与否将取决于数据属性 active-->\n    <div :class=\"[myClass,{'area-active': active}]\"></div>\n    <div style=\"text-align: center\">\n        <!--:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来) 来命名-->\n        <span :style=\"{display: 'inline-block',width: width1 + 'px',height: width1 + 'px',backgroundColor: color1}\"></span>\n        <span :style=\"{display: 'inline-block',width: width2 + 'px',height: width2 + 'px',backgroundColor: color2}\"></span>\n        <!--:style 的数组语法-->\n        <span :style=\"[styleObject]\"></span>\n    </div>\n\n\n    <div>Message is: {{msg7}}</div>\n    <br/>\n    <input v-model=\"msg7\"/>\n    <br/><br/>\n    <!--textarea绑定-->\n    <textarea v-model=\"msg7\" cols=\"80\" rows=\"5\"></textarea>\n    <br/><br/>\n    <!--复选-->\n    <input type=\"checkbox\" v-model=\"checked\">\n    <label for=\"checkbox\">{{ checked }}</label>\n    <br/><br/>\n    <!--复选数组-->\n    <div>\n        <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n        <label for=\"jack\">Jack</label>\n        <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n        <label for=\"john\">John</label>\n        <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n        <label for=\"mike\">Mike</label>\n        <br>\n        <span>Checked names: {{ checkedNames }}</span>\n    </div>\n    <br/><br/>\n    <!--单选数组-->\n    <div>\n        <input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n        <label for=\"one\">One</label>\n        <br>\n        <input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n        <label for=\"two\">Two</label>\n        <br>\n        <span>Picked: {{ picked }}</span>\n    </div>\n    <br/><br/>\n    <!--select的绑定-->\n    <div>\n        <select v-model=\"selected\">\n            <option v-for=\"option in options\" v-bind:value=\"option.value\"  :key=\"option.value\">\n                {{ option.text }}\n            </option>\n        </select>\n        <span>Selected: {{ selected }}</span>\n    </div>\n    \n    <br/><br/>\n    <!--自动将用户的输入值转为数值类型-->\n    <input type=\"number\" v-model.number=\"age\"/>\n    <span>{{typeof age}}</span>\n    <br/><br/>\n    <!--自动过滤用户输入的首尾空白字符-->\n    <input v-model.trim=\"msgs\">\n    <p>{{msgs}}</p>\n\n    <!--取消实时同步-->\n    <input v-model.lazy=\"lmsgs\">\n    <p>{{lmsgs}}</p>\n    <br/><br/>\n\n    <div v-pre>{{这里面的内容不会被编译}}</div>\n\n    <div v-once>{{msg8}}</div>\n    <input v-model=\"msg8\"/>\n    <br/><br/>\n\n    <my-button></my-button>\n    <my-button></my-button>\n    <my-button></my-button>\n\n\n    <my-title v-for=\"t in items4\" :blog=\"t\"  :key=\"t.title\" @enlarge-text=\"postFontSize += $event\" @shrink-text=\"postFontSize -= $event\"></my-title>\n\n    <no-name-slot v-for=\"i in items5\" :key=\"i.title\">\n        {{i.content}}\n    </no-name-slot>\n\n\n    <my-layout>\n        <template slot=\"header\">\n            <h1>这里是标题啊！</h1>\n        </template>\n        <p>A paragraph for the main content.</p>\n        <p>And another one.</p>\n        \n        <template slot=\"footer\">\n            <h2>这里是脚丫子</h2>\n        </template>\n    </my-layout>\n\n\n    <h3>按套路输出数据</h3>\n    <my-scope-slot>\n        <template slot-scope=\"childData\">\n            <ul>\n                <li v-for=\"item in childData.items_\" :key=\"item\">{{item}}</li>\n            </ul>\n        </template>\n    </my-scope-slot>\n    <h3>一锅端</h3>\n    <my-scope-slot>\n        <template slot-scope=\"childData\">\n            {{childData.items_}}\n        </template>\n    </my-scope-slot>\n    <h3>不使用子组件提供的数据</h3>\n    <my-scope-slot>\n        作用域插槽退化为匿名插槽\n    </my-scope-slot>\n\n\n    <button @click=\"next\">下一个</button>\n    <!--切换的关键，参数是组件的名字-->\n    <component :is=\"view\"></component>\n    <!-- 失活的组件将会被缓存！\n    <keep-alive>\n      <component v-bind:is=\"currentTabComponent\"></component>\n    </keep-alive>\n    -->\n\n      \n     <base-layout>\n        <template v-slot:header>\n            <h1>Header</h1>\n        </template>\n\n        <template v-slot:default>\n            <p>Main</p>\n        </template>\n\n        <template v-slot:footer>\n            <p>Footer</p>\n        </template>\n    </base-layout>\n    \n\n    <base-layout>\n        <template #header>\n            <h1>Header</h1>\n        </template>\n\n        <template #default>\n            <p>Main</p>\n        </template>\n\n        <template #footer>\n            <p>Footer</p>\n        </template>\n    </base-layout>\n\n<base-layout>\n        <template #header>\n            <h1>Header</h1>\n        </template>\n        <!--slotProps可以使任意名字-->\n        <template #default=\"slotProps\">\n        <strong style=\"color: crimson\">{{slotProps.user.firstName}}</strong>\n        </template>\n\n        <template #footer>\n            <p>Footer</p>\n        </template>\n    </base-layout>\n\n\n\n    <!-- ********************作用域插槽的应用******************** -->\n    <!--直接使用-->\n    <my-table :headers=\"headersData\" :items=\"itemsData\" item-key=\"id\"></my-table>\n    <!--父组件利用插槽自定义-->\n    <my-table :headers=\"headersData\" :items=\"itemsData\" item-key=\"id\">\n        <!--有了作用域插槽，可以由父组件来改变子组件的展示效果-->\n        <!--在父级作用域中，我们可以给 v-slot 带一个【值】来定义我们提供的插槽 prop 的名字-->\n        <!--【值】也就是那个 props，可以为任意名字-->\n        <template v-slot:items=\"props\">\n            <tr>\n                <td style=\"color: darkcyan\">{{props.items.id}}</td>\n                <td style=\"color: darkcyan\">{{props.items.name}}</td>\n                <td style=\"color: darkcyan\">{{props.items.age}}</td>\n            </tr>\n        </template>\n    </my-table>\n    <!-- ********************作用域插槽的应用******************** -->\n\n\n\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\n// 引入组件\nimport MyList from './components/MyList.vue'\n// 引入组件\nimport MyButton from './components/MyButton.vue'\n\nimport MyTitle from './components/MyTitle.vue'\n\nimport NoNameSlot from './components/NoNameSlot.vue'\n\nimport MyLayout from './components/MyLayout.vue'\n\nimport MyScopeSlot from './components/MyScopeSlot.vue'\n\nimport ComponentA from './components/ComponentA.vue'\n\nimport ComponentB from './components/ComponentB.vue'\n\nimport ComponentC from './components/ComponentC.vue'\n\nimport BaseLayout from './components/BaseLayout.vue'\n\nimport MyTable from './components/MyTable.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,MyList,MyButton,MyTitle,NoNameSlot,MyLayout,MyScopeSlot,ComponentA,ComponentB,ComponentC,BaseLayout,MyTable\n  },\n  computed:{\n      // 这是一个计算属性，返回当前index对应的组件名字\n      view: function () {\n          return this.componentName[this.index];\n      }\n  },\n  methods: {\n      // 循环index\n      next: function () {\n          this.index = ++this.index % 3;\n      },\n      parentClick: function () {\n          alert('父元素点击事件')\n      },\n      aClick: function () {\n          alert('普通点击事件')\n      },\n      bClick: function () {\n          alert('点击之后，不再继续冒泡到父元素')\n      },\n      cClick: function () {\n          alert('点击之后，不再触发默认跳转事件')\n      },\n      dClick: function () {\n          alert('只能点击一次，你再也不能看见我')\n      },\n      eClick: function () {\n          alert('监听回车事件')\n      },\n      fClick: function () {\n          alert('监听Ctrl+Click事件')\n      },\n      gClick: function () {\n          alert('监听Ctrl+Alt事件')\n      },\n      hClick: function () {\n          alert('监听鼠标左键事件')\n      }\n  },\n  data: ()=> ({\n    items: [\n        {id:1,text:'Apple 苹果'},\n        {id:2,text:'Banana香蕉'},\n        {id:3,text:'Orange橘子'},\n    ],\n    msg1: '更新元素的 textContent。如果要更新部分的 textContent ，需要使用 {{ Mustache }} 插值。',\n    msg2: '<h1>在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。</h1>' +'<h1>只在可信内容上使用 v-html，永不用在用户提交的内容上。</h1>',\n    flag: true,\n    msg3: '根据表达式之真假值，切换元素的 display CSS 属性',\n    flag1: true,\n    msg4: '根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。',\n    flag2: false,\n    msg5: '我很有钱',\n    flag3: 2,\n    msg6: '我很有钱',\n    items2: ['鱼香肉丝','宫保鸡丁','炖排骨'],\n    styleObject: {\n        display: 'inline-block',\n        width: '150px',\n        height: '150px',\n        'background-color': '#2990c4'\n    },\n    width1: 50,\n    color1: '#12BC99',\n    width2: 100,\n    color2: '#9455bc',\n    active: true,\n    myClass: 'area',\n    imgSrc: 'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=935292084,2640874667&fm=27&gp=0.jpg',\n    age: 10,\n    selected: '',\n    options: [\n        { text: 'One', value: 'A' },\n        { text: 'Two', value: 'B' },\n        { text: 'Three', value: 'C' }\n    ],\n    picked: [],\n    checkedNames: [],\n    checked: false,\n    msg7: '你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。',\n    msgs: '',\n    lmsgs: '',\n    msg8: '这里只编译一次',\n    postFontSize: 1,\n    items4:  [\n                {title:'My journey with Vue',content:'every component must have a single root element (每个组件必须只有一个根元素)'},\n                {title:'Blogging with Vue',content:'你可以将模板的内容包裹在一个父元素内，来修复这个问题'},\n                {title:'Why Vue is so fun',content:'看起来当组件变得越来越复杂的时候，我们的博文不只需要标题和内容，还需要发布日期、评论等等。为每个相关的信息定义一个 prop 会变得很麻烦'}\n            ],\n    items5: [\n                {title:'My journey with Vue',content:'当组件渲染的时候，这个 <slot></slot> 元素将会被替换为父组件传入的当前内容。'},\n                {title:'Blogging with Vue',content:'插槽内可以包含任何模板代码，包括 HTML'},\n                {title:'Why Vue is so fun',content:'嗯嗯嗯'},\n            ],\n    index:0,\n    componentName:['ComponentA','ComponentB','ComponentC'],\n    headersData: [\"ID\", \"Name\", \"Age\"],\n            itemsData: [\n                {id: 1, name: 'A', age: 10},\n                {id: 2, name: 'B', age: 20},\n                {id: 3, name: 'C', age: 12},\n                {id: 4, name: 'D', age: 15}\n            ]\n  })\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.area{\n    margin: 8px auto;\n    width: 50px;\n    height: 50px;\n    background-color: darkcyan;\n}\n.area-active{\n    background-color: crimson;\n}\n</style>\n"]}]}