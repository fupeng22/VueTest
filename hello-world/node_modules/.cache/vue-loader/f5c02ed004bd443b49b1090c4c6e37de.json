{"remainingRequest":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\test\\vueSpace\\hello-world\\hello-world\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\src\\App.vue","mtime":1590571724964},{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\test\\vueSpace\\hello-world\\hello-world\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}